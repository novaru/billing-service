// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: customers.sql

package generated

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (id, user_id, email, credit_balance_cents)
VALUES ($1, $2, $3, 0)
RETURNING id, user_id, email, default_payment_method, credit_balance_cents, created_at, updated_at
`

type CreateCustomerParams struct {
	ID     uuid.UUID   `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
	Email  pgtype.Text `json:"email"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, createCustomer, arg.ID, arg.UserID, arg.Email)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.DefaultPaymentMethod,
		&i.CreditBalanceCents,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCustomerByUserID = `-- name: GetCustomerByUserID :one
SELECT id, user_id, email, default_payment_method, credit_balance_cents, created_at, updated_at FROM customers WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetCustomerByUserID(ctx context.Context, userID pgtype.UUID) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByUserID, userID)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.DefaultPaymentMethod,
		&i.CreditBalanceCents,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCustomerCredits = `-- name: UpdateCustomerCredits :one
UPDATE customers
SET credit_balance_cents = credit_balance_cents + $2
WHERE id = $1
RETURNING id, user_id, email, default_payment_method, credit_balance_cents, created_at, updated_at
`

type UpdateCustomerCreditsParams struct {
	ID                 uuid.UUID   `json:"id"`
	CreditBalanceCents pgtype.Int8 `json:"credit_balance_cents"`
}

func (q *Queries) UpdateCustomerCredits(ctx context.Context, arg UpdateCustomerCreditsParams) (Customer, error) {
	row := q.db.QueryRow(ctx, updateCustomerCredits, arg.ID, arg.CreditBalanceCents)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.DefaultPaymentMethod,
		&i.CreditBalanceCents,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
