// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: plans.sql

package generated

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPlan = `-- name: CreatePlan :one

INSERT INTO plans (id, slug, name, description, price_cents, currency, interval, quota_limits, meta)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, slug, name, description, price_cents, currency, interval, quota_limits, meta, created_at, updated_at
`

type CreatePlanParams struct {
	ID          uuid.UUID   `json:"id"`
	Slug        string      `json:"slug"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	PriceCents  int64       `json:"price_cents"`
	Currency    string      `json:"currency"`
	Interval    string      `json:"interval"`
	QuotaLimits []byte      `json:"quota_limits"`
	Meta        []byte      `json:"meta"`
}

func (q *Queries) CreatePlan(ctx context.Context, arg CreatePlanParams) (Plan, error) {
	row := q.db.QueryRow(ctx, createPlan,
		arg.ID,
		arg.Slug,
		arg.Name,
		arg.Description,
		arg.PriceCents,
		arg.Currency,
		arg.Interval,
		arg.QuotaLimits,
		arg.Meta,
	)
	var i Plan
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Name,
		&i.Description,
		&i.PriceCents,
		&i.Currency,
		&i.Interval,
		&i.QuotaLimits,
		&i.Meta,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPlanBySlug = `-- name: GetPlanBySlug :one
SELECT id, slug, name, description, price_cents, currency, interval, quota_limits, meta, created_at, updated_at FROM plans
WHERE slug = $1
LIMIT 1
`

func (q *Queries) GetPlanBySlug(ctx context.Context, slug string) (Plan, error) {
	row := q.db.QueryRow(ctx, getPlanBySlug, slug)
	var i Plan
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Name,
		&i.Description,
		&i.PriceCents,
		&i.Currency,
		&i.Interval,
		&i.QuotaLimits,
		&i.Meta,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPlans = `-- name: ListPlans :many
SELECT id, slug, name, description, price_cents, currency, interval, quota_limits, meta, created_at, updated_at FROM plans
`

func (q *Queries) ListPlans(ctx context.Context) ([]Plan, error) {
	rows, err := q.db.Query(ctx, listPlans)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Plan
	for rows.Next() {
		var i Plan
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Name,
			&i.Description,
			&i.PriceCents,
			&i.Currency,
			&i.Interval,
			&i.QuotaLimits,
			&i.Meta,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
